#!/usr/bin/env env-tm-bash
#
# Run shfmt (shell formatter) on all the scripts
#
# Usage: tm-dev-shfmt [plugin_name|tool-manager]
#

_tm::source::include_once .tm.script.sh .tm.plugin.sh .tm.plugins.sh .tm.tests.sh
_trap_error

declare -A args
_parse_args \
  --file "${BASH_SOURCE[0]}" \
  --opt-what "|remainder|short=w|desc=The plugin, 'tool-manager', dir or file to check. If empty, test the tool-manager. Can pass a path to the check dir" \
  --opt-apply "|flag|short=a|desc=If set, apply the changes to the files" \
  --result args \
  -- "$@"

main() {
  _info "formatting scripts using shfmt..."

  local what="${args[what]}"
  _tm::invoke::ensure_installed shfmt

  local -a shfmt_opts=(--simplify --indent 2 --case-indent --binary-next-line --diff)
  if [[ ${args['apply']} == "1" ]]; then
    shfmt_opts+=(--write) # write to file
  fi

  local -A files
  _tm::tests::find files --what "${what}"
  what="${files[what]}"
  local -a bash_files=()
  local -a bats_files=()
  mapfile -t bash_files <<<"${files[all_bash_files]}"
  mapfile -t bats_files <<<"${files[all_bats_files]}"
  local passed=1
  if [[ ${#bash_files[@]} -gt 0 ]]; then
    if _is_debug; then
      _debug "bash_files='$(
        IFS=$'\n'
        echo "${bash_files[*]}"
      )'"
    fi
    shfmt "${shfmt_opts[@]}" --language-dialect bash "${bash_files[@]}"
  fi
  if [[ ${#bats_files[@]} -gt 0 ]]; then
    if _is_debug; then
      _debug "bats_files='$(
        IFS=$'\n'
        echo "${bats_files[*]}"
      )'"
    fi
    if ! shfmt "${shfmt_opts[@]}" --language-dialect bats "${bats_files[@]}"; then
      passed=0
    fi
  fi
  _info "script formatting done for '${what}'"
  if [[ ${args[apply]} != "1" ]]; then
    _info "Pass in '--apply' to have these changes applied"
  fi
}

main "$@"
