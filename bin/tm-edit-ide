#!/usr/bin/env env-tm-bash
#
# Edit the given plugin, or if none-given, edit the tool-manager,
# using a preferred IDE command.
# Usage: tm-edit-ide [plugin_basename]
#
# The IDE command is determined as follows:
# 1. Environment variable $TM_IDE_CMD
# 2. Tool Manager configuration: tm-cfg-get CORE_IDE_CMD
# 3. Auto-detection: 'code', then 'kate'
# If no IDE is found, it falls back to tm-edit's default editor resolution.
#

_tm::source::include .tm.script.sh

plugin_basename="${1:-}" # Optional: the base directory name of the plugin
ide_command="${2:-}" # Optional: the base directory name of the plugin


if [[ -z "$ide_command" ]]; then
    # Load the IDE command from the Tool Manager configuration.
    # If not set, it defaults to "code".
    _cfg_load --tm --key TM_IDE_CMD --default "code"
    ide_command="$TM_IDE_CMD"
fi

# 3. Auto-detection (if ide_command still not set)
if [[ -z "$ide_command" ]]; then
    if command -v code &>/dev/null; then
        ide_command="code"
        _debug "Using auto-detected IDE command: 'code'"
    elif command -v kate &>/dev/null; then
        ide_command="kate"
        _debug "Using auto-detected IDE command: 'kate'"
    fi
fi

# If an IDE command is resolved, use it. Otherwise, tm-edit will use its own defaults.
if [[ -n "$ide_command" ]]; then
    _info "Attempting to use IDE command: '$ide_command'"
    tm-edit --editor "$ide_command" --plugin "$plugin_basename"
else
    _info "No specific IDE command resolved, falling back to tm-edit default editor resolution."
    tm-edit --plugin  "$plugin_basename" # Let tm-edit handle editor resolution ($EDITOR, vi, nano)
fi
