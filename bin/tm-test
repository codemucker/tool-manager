#!/usr/bin/env env-tm-bash
#
# Runs tests for a given plugin or for the tool-manager itself.
#
# Usage: tm-test [plugin_name|tool-manager]
#

_tm::source::include_once .tm.script.sh .tm.plugin.sh .tm.plugins.sh @tm/lib.test.bats.sh

_trap_error

declare -A args
_parse_args \
    --file "${BASH_SOURCE[0]}" \
    --opt-plugin "|remainder|short=p|desc=The plugin, 'tool-manager', dir to test. If empty, test the tool-manager. Can pass a path to the tests dir" \
    --opt-test "|short=t|desc=The name of the test to match on. Will have '*' pre/post appended" \
    --opt-parallel "|flag|short=para|desc=If to run the tests in parallel" \
    --result args \
    -- "$@"

main() {
  local parallel="${args[parallel]}"
  local target="${args[plugin]}"
  local target_name=""
  local test_dir=""

  _tm::test::bats::install

  if [[ -z "$target" ]] || [[ "$target" == "tool-manager" ]]; then
    test_dir="$TM_HOME/tests"
    target_name="tool-manager"
  elif [[ "$target" =~ "."* ]] || [[ "$target" =~ "/"* ]] ; then
    test_dir="$target"
    target_name=""
  else
    local qname
    qname="$(_tm::plugins::installed::get_by_name "$target")"
    if [[ -z "$qname" ]]; then
      _fail "Plugin '$target' not found."
    fi
    local -A plugin
    _tm::parse::plugin plugin "$qname"
    local plugin_home="${plugin[install_dir]}"
    test_dir="${plugin_home}/test"
    if [[ ! -d "$test_dir" ]]; then
      test_dir="${plugin_home}/tests"
    fi
    target_name="${qname}"
  fi

  if [[ ! -d "$test_dir" ]]; then
    _info "No 'test' directory found for '$target' at '$test_dir'. Nothing to test."
    exit 0
  fi

  if [[ -n "$target_name" ]]; then
    _info "Running tests for '$target_name' in '$test_dir'"
  else
    _info "Running tests in '$test_dir'" 
  fi

  local test_files
  mapfile -t test_files_sh < <(find "$test_dir" -type f -name "*.sh" )
  mapfile -t test_files_bats < <(find "$test_dir" -type f  -name "*.bats" )
  if [[ ${#test_files_sh[@]} -eq 0 ]] && [[ ${#test_files_bats[@]} -eq 0 ]]; then
    _info "No test files (*.bats, *.bats.sh) found in '$test_dir'."
    exit 0
  fi
  local failures=0
  #echo "found test files: ${test_files[*]}"
  for test_file in "${test_files_sh[@]}"; do
    if [[ "${parallel}" == "1" ]]; then
      (
        _info "--- Running tests in: $test_file ---"
        ( "$test_file" || failures=1 ) &
        _info "--- Finished tests in: $test_file ---"
      ) &
    else
      _info "--- Running tests in: $test_file ---"
      "$test_file" || failures=1
      _info "--- Finished tests in: $test_file ---"
    fi
  done
  for test_file in "${test_files_bats[@]}"; do
    if [[ "${parallel}" == "1" ]]; then
      (
        _info "--- Running tests in: $test_file ---"
        ( bats "$test_file" || failures=1 ) &
        _info "--- Finished tests in: $test_file ---"
      ) &
    else
      _info "--- Running tests in: $test_file ---"
      bats "$test_file" || failures=1
      _info "--- Finished tests in: $test_file ---"
    fi
  done

  if [[ "${parallel}" == "1" ]]; then
    _info "waiting for parallel tests to complete..."
    wait
  fi
  _info "All tests for '$target_name' completed."
  if [[ "${failures}" == "1" ]]; then
    _fail "There were test failures!"
  fi
}

main "$@"
