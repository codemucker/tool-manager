#!/usr/bin/env env-tm-bash
# shellcheck shell=bash
#
# Runs tests for a given plugin or for the tool-manager itself.
#
# Usage: tm-test [plugin_name|tool-manager]
#

_tm::source::include_once .tm.script.sh .tm.plugin.sh .tm.plugins.sh

_trap_error

declare -A args
_parse_args \
    --file "${BASH_SOURCE[0]}" \
    --opt-plugin "|remainder|short=p|desc=The plugin, 'tool-manager', dir to test. If empty, test the tool-manager. Can pass a path to the tests dir" \
    --opt-test "|short=t|desc=The name of the test to match on. Will have '*' pre/post appended" \
    --opt-parallel "|flag|short=para|desc=If to run the tests in parallel" \
    --result args \
    -- "$@"

main() {
  __ensure_shellcheck_installed

  local parallel="${args[parallel]}"
  local target="${args[plugin]}"
  local target_name=""
  local test_dir=""
  local -a shellcheck_dirs=()

  if [[ -z "$target" ]] || [[ "$target" == "tool-manager" ]]; then
    test_dir="$TM_HOME/test"
    target_name="tool-manager"
    shellcheck_dirs+=("$TM_HOME/bin/" "$TM_HOME/bin-defaults/" "$TM_HOME/bin-internal/" "$test_dir/")
  elif [[ "$target" =~ "."* ]] || [[ "$target" =~ "/"* ]] ; then
    test_dir="$target"
    target_name=""
    shellcheck_dirs+=("$test_dir/")
  else
    local qname
    qname="$(_tm::plugins::installed::get_by_name "$target")"
    if [[ -z "$qname" ]]; then
      _fail "Plugin '$target' not found."
    fi
    local -A plugin
    _tm::parse::plugin plugin "$qname"
    local plugin_home="${plugin[install_dir]}"
    test_dir="${plugin_home}/test"
    if [[ ! -d "$test_dir" ]]; then
      test_dir="${plugin[install_dir]}/tests"
    fi
    target_name="${qname}"
    shellcheck_dirs+=("${plugin_home}/bin/" "${plugin_home}/bin-internal/" "$test_dir/")
  fi
  echo "first checking scripts using shellcheck..."
  for shellcheck_dir in "${shellcheck_dirs[@]}"; do
    if [[ -d "${shellcheck_dir}" ]]; then
      echo "shellcheck: '$shellcheck_dir'"
      mapfile -t files_to_check < <(find "${shellcheck_dir}" -maxdepth 1 -type f -exec grep -lE '^#!.*(bash|env-tm-bash)' {} +)
      if [[ ${#files_to_check[@]} -gt 0 ]]; then
        shellcheck "${files_to_check[@]}"
      fi
    fi
  done
  echo "shellcheck done"
  if [[ ! -d "$test_dir" ]]; then
    _info "No 'test' directory found for '$target' at '$test_dir'. Nothing to test."
    exit 0
  fi

  if [[ -n "$target_name" ]]; then
    _info "Running tests for '$target_name' in '$test_dir'"
  else
    _info "Running tests in '$test_dir'" 
  fi

  local test_files
  local find_name="*.sh"
  if [[ -n "${args[test]}" ]]; then
    find_name="*${args[test]}*.sh"
    _info "Filtering tests with pattern: $find_name"
  fi
  mapfile -t test_files < <(find "$test_dir" -type f -name "$find_name")

  if [[ ${#test_files[@]} -eq 0 ]]; then
    _info "No test files (*.sh) found in '$test_dir'."
    exit 0
  fi
  local failures=0
  for test_file in "${test_files[@]}"; do
    if [[ "${parallel}" == "1" ]]; then
      (
        _info "--- Running tests in: $test_file ---"
        "$test_file" || failures=1
        _info "--- Finished tests in: $test_file ---"
      ) &
    else
      _info "--- Running tests in: $test_file ---"
      "$test_file" || failures=1
      _info "--- Finished tests in: $test_file ---"
    fi
  done

  if [[ "${parallel}" == "1" ]]; then
    _info "waiting for parallel tests to complete..."
    wait
  fi
  _info "All tests for '$target' completed."
  if [[ "${failures}" == "1" ]]; then
    _fail "There were test failures!"
  fi
}

__ensure_shellcheck_installed(){
  if ! command -v shellcheck &> /dev/null; then
    _info "shellcheck not found. Attempting to install..."
    if command -v apt-get &> /dev/null; then
      sudo apt-get update && sudo apt-get install -y shellcheck
    elif command -v dnf &> /dev/null; then
      sudo dnf install -y ShellCheck
    elif command -v yum &> /dev/null; then
      sudo yum install -y ShellCheck
    elif command -v pacman &> /dev/null; then
      sudo pacman -S --noconfirm shellcheck
    elif command -v apk &> /dev/null; then
      sudo apk add shellcheck
    elif command -v brew &> /dev/null; then
      brew install shellcheck
    else
      _warn "Could not find a supported package manager (apt-get, dnf, yum, pacman, apk, brew) to install shellcheck."
      _warn "Please install shellcheck manually."
      return 1
    fi

    if ! command -v shellcheck &> /dev/null; then
      _fail "Failed to install shellcheck."
    else
      _info "shellcheck installed successfully."
    fi
  fi
}

main "$@"
