#!/usr/bin/env bash
#
# Manage services
#

source "$TM_HOME/.bashrc_script"

_tm::source::include .tm.script.sh .tm.plugins.sh .tm.service.sh

declare -A args
_parse_args \
    --file "${BASH_SOURCE[0]}" \
    --opt-plugin    "|remainder|long=plugin|short=p|value=QUAILIFIED-PLUGIN-NAME|desc=The plugin a service belongs to|example='my-ns:some-plugin','tm-install'|validators=plugin-name" \
    --opt-service   "|short=s|desc=The service to start, either a name or a config file" \
    --opt-prefix    "|desc=The plugin prefix|validators=plugin-prefix" \
    --opt-vendor    "|short=v|desc=The plugin vendor|validators=plugin-vendor" \
    --opt-command   "|short=c|desc=The service command/operation|allowed=start,stop,pause,restart,ls,info|default=ls" \
    --result args \
    -- "$@"

main(){
    local cmd="${args[command]}"
    local service="${args[service]}"
    local plugin_name="${args[plugin]}"
    local vendor_prefix=''
    if [[ -n "${args[vendor]}" ]]; then
        vendor_prefix="${args[vendor]}/"
    fi
    local all_prefix=''
    if [[ -n "${args[prefix]}" ]]; then
        all_prefix+="${args[prefix]}:"
    fi

    local plugin_id
    local -A plugin
    if [[ -n "${plugin_name}" ]]; then
        qname="$(_tm::plugins::installed::get_by_name "$all_prefix$vendor_prefix$plugin_name")"
        _tm::parse::plugin plugin "${qname}"
        plugin_id="${plugin[id]}"
    else
        _tm::parse::plugin plugin "${__TM_PLUGIN_ID}"
        plugin_id="${plugin[id]}"
    fi
    
    case "${cmd}" in
        'ls')
            _tm::service::list_service_conf "${plugin_id}" "${service}"
            ;;
        'start')
            _tm::service::start "${plugin_id}" "${service}"
            ;;
        'stop')
            _tm::service::stop "${plugin_id}" "${service}"
            ;;
        'restart'|'reload')
            _tm::service::stop "${plugin_id}" "${service}"
            _tm::service::start "${plugin_id}" "${service}"
            ;;
        'pause')
            _tm::service::pause "${plugin_id}" "${service}"
            ;;
        *)
            _fail "Do not yet support command '${cmd}'"
            ;;
    esac
}

main "$@"
